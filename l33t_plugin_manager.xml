<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="l33t_plugin_manager"
   author="Ruhamah"
   id="baa6825f5a7dd47512795deb"
   language="Lua"
   purpose="Manages updates for l33t.xyz plugins"
   date_written="2019-12-16 01:33:37"
   requires="4.76"
   version="0.02"
   save_state="y"
   >
<description trim="y">
<![CDATA[
l33t_plugin_manager (v0.02) by Ruhamah (https://aard.l33t.xyz)

>    lpm
        - display summary of all plugins

>    lpm install [number]
        - downloads and installs/updates the plugin

>    lpm update
        - checks for update for lpm itself

>    lpm update [number]
        - this functions the same as "lpm install"

>    lpm reload [number]
        - reloads all xml files related to the plugin

>    lpm reset
        - resets all retained information about previous updates

>    lpm help
        - displays this help file :)

]]>
</description>
</plugin>
<aliases>
  <alias
   match="^test$"
   regexp="y"
   enabled="y"
   sequence="100"
   script=""
  >
  </alias>
  <alias
   match="^lpm$"
   regexp="y"
   enabled="y"
   sequence="100"
   script="lpm_main"
   >
   </alias>
   <alias
    match="^lpm help$"
    regexp="y"
    enabled="y"
    sequence="100"
    script="lpm_help"
   >
   </alias>
   <alias
    match="^lpm reset$"
    regexp="y"
    enabled="y"
    sequence="100"
    script="lpm_reset"
   >
   </alias>
   <alias
    match="^lpm update ?(?<index>[0-9]+)?$"
    regexp="y"
    enabled="y"
    sequence="100"
    script="lpm_update"
   >
   </alias>
   <alias
    match="^lpm install (?<index>[0-9]+)$"
    regexp="y"
    enabled="y"
    sequence="100"
    script="lpm_install"
   >
   </alias>
   <alias
    match="^lpm reload (?<index>[0-9]+)$"
    regexp="y"
    enabled="y"
    sequence="100"
    script="lpm_reload"
   >
   </alias>
</aliases>

<script>
<![CDATA[


-- Globals

PLUGIN_ID = GetPluginID()
PLUGIN_NAME = GetPluginInfo(PLUGIN_ID, 1)
PLUGIN_AUTHOR = GetPluginInfo(PLUGIN_ID, 2)
PLUGIN_VERSION = GetPluginInfo(PLUGIN_ID, 19)
PLUGIN_NUM_TRIGGERS = GetPluginInfo(PLUGIN_ID, 9)
PLUGIN_NUM_ALIASES = GetPluginInfo(PLUGIN_ID, 10)
PLUGIN_NUM_TIMERS = GetPluginInfo(PLUGIN_ID, 11)

PLUGIN_URL = 'https://aard.l33t.xyz'


-- Locals and Imports


local async = require 'async'
local last_update
require 'zip'
require 'serialize'
local installedPlugins = {}
local lastListHash
local currentPlugin = {}
local pluginList = {}
local updatePlugin = {}
local pListNum = 0
local pluginListUrl = 'https://raw.githubusercontent.com/l33t-xyz/l33t-aardwolf-plugins/master/lpm.xml'
local lastPluginList


-- Core Functions


function lpm_main(name, line, wc)
    printmsg('*** Requesting plugin/update list from server.. Please wait.\r\n\r\n')
    async.HEAD(pluginListUrl, async_head_plist, 'HTTPS', 120)
end


function lpm_install(name, line, wc)
    for p = 1, #pluginList do
        if pluginList[p] ~= nil and tonumber(wc.index) == p then
            printmsg('Attempting to install plugin #' .. wc.index .. ' (' .. pluginList[p].name .. ')')
            install_plugin(pluginList[p])
        end
    end
    if #pluginList == 0 then
        printmsg('Error: Unable to read plugin index. Have you typed lpm yet?')
    end
end


function lpm_reset(name, line, wc)
    installedPlugins = {}
    SaveState()
    printmsg('All information about previous updates have been cleared.')
end


function lpm_reload(name, line, wc)
    for p = 1, #pluginList do
        if p == tonumber(wc.index) then
            printmsg('Attempting to reload plugin #' .. wc.index .. ' (' .. pluginList[p].name .. ')')
             for i = 1, #pluginList[p].ids do
                 ReloadPlugin(pluginList[p].ids[i])
             end
        end
    end
end


function lpm_update(name, line, wc)
    if wc.index == '' then
        printmsg('*** Checking if update is available for l33t.xyz Plugin Manager.. Please wait.\r\n\r\n')
        local url = 'https://raw.githubusercontent.com/l33t-xyz/l33t-aardwolf-plugins/master/l33t_plugin_manager.xml'
        async.doAsyncRemoteRequest(url, async_lpm_download_complete, 'HTTPS', 120)
    else
        Execute('lpm install ' .. wc.index)
    end
end


function lpm_help(name, line, wc)
    print('')
    NoteStyle(2)			        
    ColourNote('MediumSeaGreen', '', 'l33t.xyz Plugin Manager')
    NoteStyle(0)
    print('')
    ColourNote('SteelBlue', '', GetPluginInfo (GetPluginID (), 3))
    print('')
end


-- Helper Functions


function async_head_plist(retval, page, status, headers, full_status, request_url)
    if (lastListHash ~= nil and lastListHash ~= headers['etag']) or lastPluginList == nil then
        --print('No list hash yet or different one, storing ' .. headers['etag'] .. ' and beginning download')
       async.doAsyncRemoteRequest(pluginListUrl, async_xml_download_complete, 'HTTPS', 120)
    else
        for p = 1, #lastPluginList do
            local thisPlugin = lastPluginList[p]
            thisPlugin.installed = true
            for i = 1, #thisPlugin.ids do
                if not (IsPluginInstalled(thisPlugin.ids[i]) and GetPluginInfo(thisPlugin.ids[i], 17)) then
                    thisPlugin.installed = false
                    --print('Plugin not installed and enabled!!' .. thisPlugin.ids[i])
                end
            end
            get_plugin_info(thisPlugin)
        end
    end
end


function async_head_plugin(retval, page, status, headers, full_status, request_url)
    local thisPlugin
    pListNum = pListNum + 1
    --if status == 200 then
    if #pluginList == 0  and #lastPluginList > 0 then
        pluginList = lastPluginList
    end
    for i = 1, #pluginList do
        if pluginList[i].download == request_url then
            thisPlugin = pluginList[i]
        end
    end
    if thisPlugin == nil then return end
    thisPlugin.lastModified = headers['etag'] or 'Unknown'
    if pListNum == #pluginList then
        pListNum = 0
        for i = 1, #pluginList do
            thisPlugin = pluginList[i]
            thisPlugin.updated = false
            ColourTell('CornFlowerBlue', '', '[' .. i .. '] ', 'LightSkyBlue', '', thisPlugin.name .. ' ')
            if thisPlugin.installed then
                Hyperlink('lpm reload ' .. i, '[Reload Plugin] ', 'Reload Plugin #' .. pListNum, 'LimeGreen', 'black', 0, 1)
                for k, v in pairs(installedPlugins) do
                    if thisPlugin.ids[1] == k then
                        if thisPlugin.lastModified == v then
                            thisPlugin.updated = true
                            ColourTell('LimeGreen', '', '*up-to-date*')
                            print('')
                        end
                    end
                end
                if not thisPlugin.updated then
                    Hyperlink('lpm install ' .. i, '[Update Plugin]', 'Download and Update Plugin #' .. i, 'DarkOrange', 'black', 0, 1)
                    print('')
                    --if thisPlugin.lastModified ~= 'Unknown' then
                    --   ColourTell('LightSkyBlue', '', '     Update available since: ' .. thisPlugin.lastModified)
                    --   print('')
                    --end
                end
                ColourTell('CadetBlue', '', '     ' .. thisPlugin.description)
                print('\r\n\r\n')
            else
                Hyperlink('lpm install ' .. i, '[Install Plugin]', 'Download and Install Plugin #' .. pListNum, 'DarkOrange', 'black', 0, 1)
                --ColourTell('LightSkyBlue', '', thisPlugin.lastModified)
                for k, v in pairs(installedPlugins) do
                    --print(k, thisPlugin.ids[1])
                    if thisPlugin.ids[1] == k then
                        if thisPlugin.lastModified == v then
                            --print('Same version as installed!')
                        else
                            --print('UPDATE AVAIL!!')
                        end
                    end
                end
                print('')
                ColourTell('CadetBlue', '', '     ' .. thisPlugin.description)
                print('\r\n\r\n')
            end
        end
        ColourTell('LightSkyBlue', '', '** l33t.xyz writes plugins for fun, and to share with others.\r\n** If you find them useful and would like to donate, we do accept PayPal at: ')
        Hyperlink('https://paypal.me/l33tdotxyz', 'https://paypal.me/l33tdotxyz', 'Click to donate via PayPal', 'yellowgreen', '', 1)
        print('')
        --printmsg('End of plugin list, ' .. #pluginList .. ' plugins indexed.')
    end
end


function async_lpm_download_complete(retval, page, status, headers, full_status, request_url)
    if status == 200 then
        local version = tonumber(string.match(page, "%s%s+version='([0-9%.]+)'"))
        local installedVer = GetPluginInfo(GetPluginID(), 19)
        if version > installedVer then
            printmsg('Updating from version ' .. installedVer .. ' to version ' .. version)
            local file = io.open(GetPluginInfo(GetPluginID(), 6), 'w')
            page = string.gsub(page, '\r', '')
            file:write(page)
            file:close()
            if GetAlphaOption('script_prefix') == '' then SetAlphaOption('script_prefix', '\\\\\\') end
            Execute(
                GetAlphaOption('script_prefix')
                .. 'DoAfterSpecial(1, "'
                .. 'ReloadPlugin('
                .. "'"
                .. GetPluginID()
                .. "')"
                .. ', sendto.script)'
            )
        else
            printmsg('You already have the latest version of l33t.xyz Plugin Manager installed.')
        end
    else
        printmsg('Plugin update check failed...Error ' .. tostring(status))
    end
end


function async_plugin_download_complete(retval, page, status, headers, full_status, request_url)
    local folder
    local xmlFiles = {}
    local xmlFile = {}
    if updatePlugin.installpath == '1' then
        folder = GetInfo(66)
    else
        folder = GetPluginInfo(GetPluginID(), 20)
    end
    --print('FOLDER IS ' .. folder)
    if status == 200 then -- download successful
        printmsg('----------------------------------------------')
        printmsg('*** ' .. updatePlugin.name .. ' download successful.')
        f = assert(io.open (folder .. 'temp_update.zip', 'wb'))
        f:write(page)
        f:close()
        local zfile, err = zip.open(folder .. 'temp_update.zip')
        printmsg('Extracting files from zip:')
        for file in zfile:files() do
            local currFile, err = zfile:open(file.filename)
            local currFileContents = currFile:read('*a') -- read entire contents of current file
            local hBinaryOutput = io.open(folder .. file.filename, 'wb')
            -- write current file inside zip to a file outside zip
            if (hBinaryOutput) then
                hBinaryOutput:write(currFileContents)
                hBinaryOutput:close()
            end
            printmsg('(+) ' .. file.filename)
            local fileExt = string.sub(file.filename, -4)
            if fileExt == '.xml' then
                xmlFile = {}
                xmlFile.filename = file.filename
                --print(xmlFile.filename)
                xmlFile.pluginId = string.match(currFileContents, '%s%s+id="(.-)"')
                table.insert(xmlFiles, xmlFile)
            end
            currFile:close()
        end
        os.remove(folder .. 'temp_update.zip')
        printmsg('Update succeeded, loading/reloading plugins.')
        printmsg('----------------------------------------------')

        for i = 1, #updatePlugin.ids do
            --if not IsPluginInstalled(thisPlugin.ids[i]) then
                --LoadPlugin(folder ..  
            --end
            --(IsPluginInstalled(thisPlugin.ids[i]) and GetPluginInfo(thisPlugin.ids[i], 17)) then
            --ReloadPlugin(updatePlugin.ids[i])
        end

        for i = 1, #xmlFiles do
            local xmlFile = xmlFiles[i]
            --print(xmlFiles[i].filename, xmlFiles[i].pluginId)
            --local version = tonumber(string.match(page, '%s%s+version='([0-9%.]+)''))
            if not (IsPluginInstalled(xmlFile.pluginId) and GetPluginInfo(xmlFile.pluginId, 17)) then
                LoadPlugin(folder .. xmlFile.filename)
            else
                ReloadPlugin(xmlFile.pluginId)
            end
            installedPlugins[xmlFile.pluginId] = headers['etag']
        end
        SaveState()
    else
        printmsg('Plugin download failed...Error ' .. tostring(status))
        --printmsg(headers['location'])
    end
    updatePlugin = {}
    xmlFiles = {}
end


function async_xml_download_complete(retval, page, status, headers, full_status, request_url)
    if status == 200 then
        --print(page)
        --print(status)
        lastListHash = headers['etag']
        SaveState()
        local xml = utils.xmlread(page)
        local num_plugins = #xml.nodes [2].nodes
        --print(num_plugins)
        pluginList = {}
        for p = 1,num_plugins do
            num_plugin_nodes = #xml.nodes [2].nodes [p].nodes
            local thisPlugin = {}
            thisPlugin.ids = {}
            for n = 1, num_plugin_nodes do
                local xmlkey = xml.nodes [2].nodes [p].nodes [n].name
                local xmlval = xml.nodes [2].nodes [p].nodes [n].content
                if xmlkey == 'name' then thisPlugin.name = xmlval
                elseif xmlkey == 'author' then thisPlugin.author = xmlval
                elseif xmlkey == 'description' then thisPlugin.description = xmlval
                elseif xmlkey == 'id' then table.insert(thisPlugin.ids, xmlval)
                elseif xmlkey == 'download' then thisPlugin.download = xmlval
                elseif xmlkey == 'installpath' then thisPlugin.installpath = xmlval
                end
            end
            require 'tprint'
            pluginList[p] = thisPlugin
            thisPlugin.installed = true
            for i = 1, #thisPlugin.ids do
                if not (IsPluginInstalled(thisPlugin.ids[i]) and GetPluginInfo(thisPlugin.ids[i], 17)) then
                    thisPlugin.installed = false
                    --print('Plugin not installed and enabled!!' .. thisPlugin.ids[i])
                end
            end
        end
        lastPluginList = pluginList
        SaveState()
        for p = 1, #pluginList do
            get_plugin_info(pluginList[p])
        end
    else
        printmsg('Downloading plugin list failed...Error ' .. tostring(status))
    end
end


function get_plugin_info(plugin)
    local http_mode = string.sub(plugin.download, 1, 5)
    if http_mode == 'https' then
        http_mode = string.upper(http_mode)
    else
        http_mode = 'HTTP'
    end
    async.HEAD(plugin.download, async_head_plugin, http_mode, 120)
end


function install_plugin(plugin)
    --print('plugin.ids[1]: ' .. plugin.ids[1])
    url = plugin.download
    local http_mode = string.sub(url, 1, 5)
    if http_mode == 'https' then
        http_mode = string.upper(http_mode)
    else
        http_mode = 'HTTP'
    end
    updatePlugin = plugin
    async.doAsyncRemoteRequest(url, async_plugin_download_complete, http_mode, 120)
end


function printmsg(msg)
    ColourNote('CornFlowerBlue', '', msg)
end


function OnPluginBroadcast (msg, id, name, text)
    require 'gmcphelper'
    if (id == '3e7dedbe37e44942dd46d264') then  -- GMCP Handler plugin
        if text == 'char.status' then
        end
    end
end


function OnPluginInstall()
    local installedStr = GetVariable('installedPlugins')
    local lastListStr = GetVariable('lastPluginList')
    if installedStr ~= nil then
        installedPlugins = load( 'return ' .. installedStr)() 
    end
    if lastListStr ~= nil then
        lastPluginList = load( 'return ' .. lastListStr)() 
    end
    lastListHash = GetVariable('lastListHash')

    ColourTell(
        'CornFlowerBlue', '', '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n',
        'CornFlowerBlue', '', (
            'Loaded ' .. PLUGIN_NAME
            .. ' (v' .. PLUGIN_VERSION .. ')'
            .. ' by ' .. PLUGIN_AUTHOR
            .. ' ('
        )
    )
    Hyperlink(PLUGIN_URL, PLUGIN_URL, '', '', '', 1)
    ColourTell(
        'CornFlowerBlue', '', (
            ').\n'
            .. 'Loaded '
            .. PLUGIN_NUM_TRIGGERS .. ' triggers, '
            .. PLUGIN_NUM_ALIASES .. ' aliases, '
            .. PLUGIN_NUM_TIMERS .. ' timers.\n\n'
        ),
        'CornFlowerBlue', '', 'Type "',
        'MediumSeaGreen', '', 'lpm',
        'CornFlowerBlue', '', '" or "',
        'MediumSeaGreen', '', 'lpm help',
        'CornFlowerBlue', '', '".\n',
        'CornFlowerBlue', '', '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n'
    )
end


function OnPluginSaveState()
    -- this will run when SaveState() is called or if MUSH is closing etc
    if installedPlugins ~= nil then
        SetVariable('installedPlugins', serialize.save_simple(installedPlugins))
    end
    if lastListHash ~= nil then
        SetVariable('lastListHash', lastListHash)
    end
    if lastPluginList ~= nil then
        SetVariable('lastPluginList', serialize.save_simple(lastPluginList))
    end
end


-- Utils --
function md5sum(filename)
    if filename then
        f = io.open (filename, 'rb')
        if f then
            print ('File: ' .. filename .. ' - md5sum =', utils.tohex (utils.md5 (f:read ('*a'))))
            f:close()
        end
    end
end


]]>
</script> 
</muclient>
